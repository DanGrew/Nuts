/*
 * PLGUINS: apply all plugins needed for the build
 */
plugins {
    id "com.jfrog.bintray" version "1.8.1"
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id 'org.openjfx.javafxplugin' version '0.0.8'
}

allprojects { 
	apply plugin: 'java'
	apply plugin: 'maven'
	apply plugin: 'maven-publish'
	apply plugin: 'eclipse'
	apply plugin: 'application'
}

/*
 * VERSIONING: describe build and calculate build number
 */
description = """Nutrient Usage Tracking System"""
group = 'dangrew.uk'

def buildNumberFromEnvironment = System.getenv()[ 'VERSION_NUMBER' ]
def buildNumberForThisEnvironment = ( buildNumberFromEnvironment != null ? buildNumberFromEnvironment : 'WORKSPACE' ) 
version = buildNumberForThisEnvironment

/*
 * SOURCE: source specific configuration
 */
sourceCompatibility = 14
targetCompatibility = 14

javafx {
    version = "14"
    modules = [ 'javafx.base', 'javafx.controls', 'javafx.media', 'javafx.graphics']
}

sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
			srcDir 'src'
        }
    }
    test {
        java {
            srcDir 'test'
        }
        resources {
//resources are dotted through the folder - arguably against conventions
			srcDir 'src'
        	srcDir 'test'
        }
    }
}

/*
 * DEPENDENCIES: define repos for resolving and dependencies to resolve
 */
repositories {
     mavenCentral()
	 maven { url  "http://dl.bintray.com/dangrew/dag-kode" }
     maven { url  "http://dl.bintray.com/dangrew/SystemDigest" }
     maven { url  "http://dl.bintray.com/dangrew/JsonUpgradingPersistenceArchitecture" }
     maven { url "http://repo.maven.apache.org/maven2" }
}

dependencies {
    compile group: 'org.controlsfx', name: 'controlsfx', version:'11.0.1'
    compile group: 'dom4j', name: 'dom4j', version:'1.6.1'
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version:'4.5.4'
    compile group: 'org.json', name: 'json', version:'20151123'
    compile group: 'uk.dangrew', name: 'dag-kode', version: '1.0.66'
    compile group: 'SystemDigest', name: 'SystemDigest', version: '1.3.12'
    compile group: 'jupa', name: 'JsonUpgradingPersistenceArchitecture', version: '1.2.8'
    compile 'de.jensd:fontawesomefx-materialicons:2.2.0-9.1.2'
    compile group: 'de.jensd', name: 'fontawesomefx-materialdesignfont', version: '2.0.26-9.1.2'
    compile group: 'de.jensd', name: 'fontawesomefx-fontawesome', version: '4.7.0-9.1.2'
    compile group: 'org.jsoup', name: 'jsoup', version: '1.7.2'
    compile 'org.apache.commons:commons-math3:3.6.1'
    
    
    testCompile group: 'junit', name: 'junit', version:'4.12'
    testCompile group: 'pl.pragmatists', name: 'JUnitParams', version:'1.0.5'
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version:'1.3'
    testCompile group: 'org.mockito', name: 'mockito-all', version:'1.9.5'
    testCompile group: 'uk.dangrew', name: 'dag-kode', version: '1.0.66', classifier: 'tests'
    testCompile group: 'SystemDigest', name: 'SystemDigest', version: '1.3.12', classifier: 'tests'
    testCompile group: 'jupa', name: 'JsonUpgradingPersistenceArchitecture', version: '1.2.8', classifier: 'tests'
}

/*
 * UNIT TESTS: configure reports and scope of tests
 */
test {
    filter {
//test intermingled unit + integ - arguably against conventions
        includeTestsMatching "*Test"
    }
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
    reports {
	    junitXml.enabled = true
	    html.enabled = false
    }
}

/*
 * INTEGRATION TESTS: configure reports and scope of tests
 */
task integrationTests( type: Test ) {
  	filter {
  		includeTestsMatching "*IT"
  	}
  
	testLogging.events = test.testLogging.events
	reports.junitXml.enabled = test.reports.junitXml.enabled
	reports.html.enabled = test.reports.html.enabled
}
check.dependsOn integrationTests

/*
 * TEST PACKAGING: packaging tests
 */
task packageTests(type: Jar) {
  from sourceSets.test.output
  classifier = 'tests'
}
artifacts.archives packageTests

/*
 * SHADOW: configure runnable element
 */
//configure specific name so not '-all'
shadowJar.archiveName = jar.archiveName.replace( '.jar', '-runnable.jar' )
shadowJar.outputs.upToDateWhen { false }
//link to main class in jar
mainClassName = "uk.dangrew.nuts.main.Nuts"
//bind with jar so that whenever jar is run, shadow is run
jar.dependsOn shadowJar

bintray {
    user = bintrayUser
    key = bintrayKey
    configurations = ['archives']
    publications = ['core', 'runnable']
    
    publish = true //auto publish everything
    
    pkg {
        repo = 'Nuts'
        name = 'Nuts'
        userOrg = bintrayUser
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/DanGrew/Nuts.git'
        
        version {
            name = buildNumberForThisEnvironment
            desc = 'Continuous Delivery rolling version'
            released = new Date()
        }
    }
}

publishing {
    publications {
    	//publish standard core components - jar + tests
        core(MavenPublication) {
        	//publish all items
            from components.java

        	//configure description
            groupId group
            artifactId 'nuts'
            version version
        }
        
        //publish runnable jar
        runnable(MavenPublication) {
        	//publish only the shadow jar
      		artifact ( shadowJar ) { classifier = 'runnable' }

        	//configure description of publication
            groupId group
            artifactId 'nuts'
            version version
    	}
    }
}
